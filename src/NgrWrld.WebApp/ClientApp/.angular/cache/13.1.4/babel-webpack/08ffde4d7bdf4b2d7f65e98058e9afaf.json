{"ast":null,"code":"import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    i0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelementStart(1, \"div\", 14, 15);\n    i0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    i0.ɵɵprojection(3, 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    i0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    i0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel. */\n\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\n\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\n\nconst SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\n\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\n\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\n\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\n\nclass MatSelectChange {\n  constructor(\n  /** Reference to the select that emitted the change event. */\n  source,\n  /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n} // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\nclass MatSelectTrigger {}\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_SELECT_TRIGGER,\n    useExisting: MatSelectTrigger\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger',\n      providers: [{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatSelectTrigger\n      }]\n    }]\n  }], null, null);\n})();\n/** Base class with all of the `MatSelect` functionality. */\n\n\nclass _MatSelectBase extends _MatSelectMixinBase {\n  constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n    var _a, _b, _c;\n\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._viewportRuler = _viewportRuler;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._dir = _dir;\n    this._parentFormField = _parentFormField;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._defaultOptions = _defaultOptions;\n    /** Whether or not the overlay panel is open. */\n\n    this._panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n    this._compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n\n\n    this._uid = `mat-select-${nextUniqueId++}`;\n    /** Current `ariar-labelledby` value for the select trigger. */\n\n    this._triggerAriaLabelledBy = null;\n    /** Emits whenever the component is destroyed. */\n\n    this._destroy = new Subject();\n    /** `View -> model callback called when value changes` */\n\n    this._onChange = () => {};\n    /** `View -> model callback called when select has been touched` */\n\n\n    this._onTouched = () => {};\n    /** ID for the DOM node containing the select's value. */\n\n\n    this._valueId = `mat-select-value-${nextUniqueId++}`;\n    /** Emits when the panel element is finished transforming in. */\n\n    this._panelDoneAnimatingStream = new Subject();\n    this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n    this._focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n\n    this.controlType = 'mat-select';\n    this._multiple = false;\n    this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n    /** Aria label of the select. */\n\n    this.ariaLabel = '';\n    /** Combined stream of all of the child options' change events. */\n\n    this.optionSelectionChanges = defer(() => {\n      const options = this.options;\n\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n\n      return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n\n    this.openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the select has been closed. */\n\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the selected value has been changed by the user. */\n\n    this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    } // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n    if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n      this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    this.id = this.id;\n  }\n  /** Whether the select is focused. */\n\n\n  get focused() {\n    return this._focused || this._panelOpen;\n  }\n  /** Placeholder to be shown if no value has been selected. */\n\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether the component is required. */\n\n\n  get required() {\n    var _a, _b, _c, _d;\n\n    return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /** Whether the user should be allowed to select multiple options. */\n\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /** Whether to center the active option over the trigger. */\n\n\n  get disableOptionCentering() {\n    return this._disableOptionCentering;\n  }\n\n  set disableOptionCentering(value) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n\n\n  get compareWith() {\n    return this._compareWith;\n  }\n\n  set compareWith(fn) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n\n    this._compareWith = fn;\n\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /** Value of the select control. */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue) {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n\n      this._value = newValue;\n    }\n  }\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n\n  get typeaheadDebounceInterval() {\n    return this._typeaheadDebounceInterval;\n  }\n\n  set typeaheadDebounceInterval(value) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  /** Unique id of the element. */\n\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple);\n    this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n\n    this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby(); // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n\n\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n\n    this._destroy.complete();\n\n    this.stateChanges.complete();\n  }\n  /** Toggles the overlay panel open or closed. */\n\n\n  toggle() {\n    this.panelOpen ? this.close() : this.open();\n  }\n  /** Opens the overlay panel. */\n\n\n  open() {\n    if (this._canOpen()) {\n      this._panelOpen = true;\n\n      this._keyManager.withHorizontalOrientation(null);\n\n      this._highlightCorrectOption();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Closes the overlay panel and focuses the host element. */\n\n\n  close() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._changeDetectorRef.markForCheck();\n\n      this._onTouched();\n    }\n  }\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n\n\n  writeValue(value) {\n    this.value = value;\n  }\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetectorRef.markForCheck();\n\n    this.stateChanges.next();\n  }\n  /** Whether or not the overlay panel is open. */\n\n\n  get panelOpen() {\n    return this._panelOpen;\n  }\n  /** The currently selected option. */\n\n\n  get selected() {\n    var _a, _b;\n\n    return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n  }\n  /** The value displayed in the trigger. */\n\n\n  get triggerValue() {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n  /** Whether the element is in RTL mode. */\n\n\n  _isRtl() {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n  /** Handles all keydown events on the select. */\n\n\n  _handleKeydown(event) {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n  /** Handles keyboard events while the select is closed. */\n\n\n  _handleClosedKeydown(event) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n    if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n      }\n    }\n  }\n  /** Handles keyboard events when the selected is open. */\n\n\n  _handleOpenKeydown(event) {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close(); // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n\n\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n\n\n  _onAttached() {\n    this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n\n      this._positioningSettled();\n    });\n  }\n  /** Returns the theme to be used on the panel. */\n\n\n  _getPanelTheme() {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n  /** Whether the select has a value. */\n\n\n  get empty() {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n\n\n  _setSelectionByValue(value) {\n    this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n\n    this._selectionModel.clear();\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      value.forEach(currentValue => this._selectValue(currentValue));\n\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n\n\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n\n\n  _selectValue(value) {\n    const correspondingOption = this.options.find(option => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n\n  _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        } // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n\n\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n\n\n  _resetOptions() {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    }); // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n\n    merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    });\n  }\n  /** Invoked when an option is clicked. */\n\n\n  _onSelect(option, isUserInput) {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n\n      this._selectionModel.clear();\n\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n  /** Sorts the selected values in the selected based on their order in the panel. */\n\n\n  _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n      });\n\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n\n\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n\n    if (this.multiple) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n\n    this._onChange(valueToEmit);\n\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n\n\n  _highlightCorrectOption() {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n  /** Whether the panel is allowed to open. */\n\n\n  _canOpen() {\n    var _a;\n\n    return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n  }\n  /** Focuses the select element. */\n\n\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Gets the aria-labelledby for the select panel. */\n\n\n  _getPanelAriaLabelledby() {\n    var _a;\n\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Determines the `aria-activedescendant` to be set on the host. */\n\n\n  _getAriaActiveDescendant() {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n  /** Gets the aria-labelledby of the select component trigger. */\n\n\n  _getTriggerAriaLabelledby() {\n    var _a;\n\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n\n    return value;\n  }\n  /** Called when the overlay panel is done animating. */\n\n\n  _panelDoneAnimating(isOpen) {\n    this.openedChange.emit(isOpen);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n  }\n\n}\n\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n  return new (t || _MatSelectBase)(i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ErrorStateMatcher), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.NgForm, 8), i0.ɵɵdirectiveInject(i4.FormGroupDirective, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), i0.ɵɵdirectiveInject(i4.NgControl, 10), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.LiveAnnouncer), i0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n};\n\n_MatSelectBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatSelectBase,\n  viewQuery: function _MatSelectBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    }\n  },\n  inputs: {\n    panelClass: \"panelClass\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n    sortComparator: \"sortComparator\",\n    id: \"id\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSelectBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.ErrorStateMatcher\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }, {\n      type: i4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.LiveAnnouncer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECT_CONFIG]\n      }]\n    }];\n  }, {\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    _overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    typeaheadDebounceInterval: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }]\n  });\n})();\n\nclass MatSelect extends _MatSelectBase {\n  constructor() {\n    super(...arguments);\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n\n    this._scrollTop = 0;\n    /** The cached font-size of the trigger element. */\n\n    this._triggerFontSize = 0;\n    /** The value of the select panel's transform-origin property. */\n\n    this._transformOrigin = 'top';\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n\n    this._offsetY = 0;\n    this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n\n\n  _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n\n  open() {\n    if (super._canOpen()) {\n      super.open();\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n      this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n      this._calculateOverlayPosition(); // Set the font size on the panel element once it exists.\n\n\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        if (this._triggerFontSize && this._overlayDir.overlayRef && this._overlayDir.overlayRef.overlayElement) {\n          this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n        }\n      });\n    }\n  }\n  /** Scrolls the active option into view. */\n\n\n  _scrollOptionIntoView(index) {\n    const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n    const itemHeight = this._getItemHeight();\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      this.panel.nativeElement.scrollTop = 0;\n    } else {\n      this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n  }\n\n  _positioningSettled() {\n    this._calculateOverlayOffsetX();\n\n    this.panel.nativeElement.scrollTop = this._scrollTop;\n  }\n\n  _panelDoneAnimating(isOpen) {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n    } else {\n      this._overlayDir.offsetX = 0;\n\n      this._changeDetectorRef.markForCheck();\n    }\n\n    super._panelDoneAnimating(isOpen);\n  }\n\n  _getChangeEvent(value) {\n    return new MatSelectChange(this, value);\n  }\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n\n\n  _calculateOverlayOffsetX() {\n    const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const isRtl = this._isRtl();\n\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n    let offsetX; // Adjust the offset, depending on the option padding.\n\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else if (this.disableOptionCentering) {\n      offsetX = SELECT_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    } // Invert the offset in LTR.\n\n\n    if (!isRtl) {\n      offsetX *= -1;\n    } // Determine how much the select overflows on each side.\n\n\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n\n\n    this._overlayDir.offsetX = Math.round(offsetX);\n\n    this._overlayDir.overlayRef.updatePosition();\n  }\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n\n\n  _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n    if (this.disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n\n      let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    } // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n\n\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n\n\n  _checkOverlayWithinViewport(maxScroll) {\n    const itemHeight = this._getItemHeight();\n\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n      this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n  /** Adjusts the overlay panel up to fit in the viewport. */\n\n\n  _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n  /** Adjusts the overlay panel down to fit in the viewport. */\n\n\n  _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n\n\n  _calculateOverlayPosition() {\n    const itemHeight = this._getItemHeight();\n\n    const items = this._getItemCount();\n\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n    const maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n    let selectedOptionOffset;\n\n    if (this.empty) {\n      selectedOptionOffset = 0;\n    } else {\n      selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n    }\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n  /** Sets the transform origin point based on the selected option. */\n\n\n  _getOriginBasedOnOption() {\n    const itemHeight = this._getItemHeight();\n\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n  /** Calculates the height of the select's options. */\n\n\n  _getItemHeight() {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n\n\n  _getItemCount() {\n    return this.options.length + this.optionGroups.length;\n  }\n\n}\n\nMatSelect.ɵfac = /* @__PURE__ */function () {\n  let ɵMatSelect_BaseFactory;\n  return function MatSelect_Factory(t) {\n    return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = i0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n  };\n}();\n\nMatSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n  hostVars: 20,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      i0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 12,\n  consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      i0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 5);\n      i0.ɵɵelement(7, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n      i0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      i0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      i0.ɵɵattribute(\"id\", ctx._valueId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  directives: [i7.CdkOverlayOrigin, i8.NgSwitch, i8.NgSwitchCase, i8.NgSwitchDefault, i7.CdkConnectedOverlay, i8.NgClass],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'combobox',\n        'aria-autocomplete': 'none',\n        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n        // value. At some point we should try to switch it back to being `listbox`.\n        'aria-haspopup': 'true',\n        'class': 'mat-select',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        '[class.mat-select-multiple]': 'multiple',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"]\n    }]\n  }], null, {\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MAT_SELECT_TRIGGER]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSelectModule {}\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["i7","Overlay","CdkConnectedOverlay","OverlayModule","i8","CommonModule","i0","InjectionToken","Directive","EventEmitter","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","i2","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","i6","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","i1","CdkScrollableModule","i5","ActiveDescendantKeyManager","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","i4","Validators","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","i3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","ɵdir","useExisting","type","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","disableOptionCentering","ariaLabel","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","placeholder","_placeholder","stateChanges","next","required","_d","_required","control","hasValidator","multiple","_selectionModel","ngDevMode","compareWith","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","_id","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","NgForm","FormGroupDirective","NgControl","LiveAnnouncer","decorators","MatFormField","undefined","panelClass","errorStateMatcher","MatSelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","ɵcmp","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","exportAs","inputs","encapsulation","None","changeDetection","OnPush","host","animations","template","styles","descendants","customTrigger","MatSelectModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/rexxr/Documents/projectss/NgrWorld/src/NgrWrld.WebApp/ClientApp/node_modules/@angular/material/fesm2015/select.mjs"],"sourcesContent":["import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: _MatSelectBase, inputs: { panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i6.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }, { type: i4.NgControl, decorators: [{\n                        type: Self\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SELECT_SCROLL_STRATEGY]\n                    }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECT_CONFIG]\n                    }] }];\n    }, propDecorators: { trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], directives: [{ type: i7.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { type: i8.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i8.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i8.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { type: i7.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { type: i8.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}